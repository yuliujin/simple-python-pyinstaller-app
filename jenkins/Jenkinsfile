pipeline {
    agent none
    environment {
        AWS_ACCESS_KEY_ID = credentials('lyu-aws-secret-key-id')
        AWS_SECRET_ACCESS_KEY = credentials('lyu-aws-secret-access-key')
    }
    stages {
        stage('Check ubuntu version') {
            agent {
                dockerfile {
                    filename 'Dockerfile'
                    dir 'jenkins'
                }
            }
            steps {
                sh 'pip install --upgrade pip'
                sh 'pip install requests'
                sh 'pip install boto3'
                sh 'cd sources/baseami/upgrade/enhanced_network;rm -rf amzn-drivers;git clone https://github.com/amzn/amzn-drivers;cd amzn-drivers;git tag | tail -1 | awk -F\'_\' \'{print $3}\' > ../ena_version'
                sh 'python sources/baseami/upgrade/upgrade.py'
            }
        }
        stage('Upgrade u14 if needed') {
            agent {
                docker {
                    image 'python:2-alpine'
                }
            }
            when {
                expression {
                    return fileExists('app3_trusty_upgrade_trigger')
                }
            }
	        steps {
                sh 'pip install boto3'
                sh 'python sources/baseami/upgrade/foundation_ami/upgrade.py u14'
	        }
	        post {
		        always {
		            archiveArtifacts 'sources/baseami/pure_base_ami_upgrade.js'
		        }
            }
        }
        stage('Upgrade u16 if needed') {
            agent {
                docker {
                    image 'python:2-alpine'
                }
            }
            when {
                expression {
                    return fileExists('app3_xenial_upgrade_trigger')
                }
            }
	        steps {
                sh 'pip install boto3'
                sh 'python sources/baseami/upgrade/foundation_ami/upgrade.py u16'
            }
	        post {
                always {
                    archiveArtifacts 'sources/baseami/pure_base_ami_upgrade.js'
                }
            }
        }
        stage('Upgrade u18 if needed') {
            agent {
                docker {
                    image 'python:2-alpine'
                }
            }
            when {
                expression {
                    return fileExists('app3_bionic_upgrade_trigger')
                }
            }
	        steps {
                sh 'pip install boto3'
                sh 'python sources/baseami/upgrade/foundation_ami/upgrade.py u18'
	        }
	        post {
		        always {
		        	archiveArtifacts 'sources/baseami/pure_base_ami_upgrade.js'
		        }
            }
        }
        stage('Notify SRE team for datadog upgrade if needed') {
            agent {
                docker {
                    image 'python:2-alpine'
                }
            }
            when {
                expression {
                    return fileExists('app1_upgrade_trigger')
                }
            }
            steps {
                echo "need to notify SRE to upgrade datadog"
            }
        }
        stage('Notify SRE team for ena upgrade if needed') {
            agent {
                docker {
                    image 'python:2-alpine'
                }
            }
            when {
                expression {
                   return fileExists('app2_upgrade_trigger')
                }
            }
            steps {
                mail to: 'lyu@purestorage.com',
                subject: "Datadog has newer version now.",
                body: "Datadog has newer version now."
            }
        }
    }
}
